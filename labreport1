def topological_sort(graph):
    visited = set()
    stack = []

    def dfs(node):
        nonlocal visited
        if node in visited:
            return
        visited.add(node)
        for neighbor in graph.get(node, []):
            dfs(neighbor)
        stack.append(node)

    for node in graph:
        dfs(node)

    return stack[::-1]

def construct_graph(grid):
    graph = {}
    rows = len(grid)
    cols = len(grid[0])

    for i in range(rows):
        for j in range(cols):
            if grid[i][j] != '#':
                neighbors = []
                if i > 0 and grid[i - 1][j] != '#':
                    neighbors.append((i - 1, j))
                if i < rows - 1 and grid[i + 1][j] != '#':
                    neighbors.append((i + 1, j))
                if j > 0 and grid[i][j - 1] != '#':
                    neighbors.append((i, j - 1))
                if j < cols - 1 and grid[i][j + 1] != '#':
                    neighbors.append((i, j + 1))
                graph[(i, j)] = neighbors

    return graph

# Example usage
grid = [
    ['#', '.', '#', '.', '.', '.', '.'],
    ['.', '.', '.', '#', '#', '.', '.'],
    ['.', '#', '.', '.', '.', '.', '#'],
    ['.', '#', '#', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '#', '#', '.'],
    ['.', '.', '#', '.', '.', '.', '.'],
    ['.', '.', '#', '.', '.', '.', '.']
]

graph = construct_graph(grid)
topological_order = topological_sort(graph)

print("Topological order of node traversal:")
for node in topological_order:
    print(node, end=' ')
